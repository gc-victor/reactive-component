# Triggers on tags v*; creates/updates GitHub Release using git-cliff output.
name: Create GitHub Release from CHANGELOG

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

# Requires default GITHUB_TOKEN with 'contents: write' to call gh release.
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    # One run per ref; avoids duplicate releases on rapid retags.
    concurrency:
      group: release-${{ github.ref }}
      cancel-in-progress: false
    steps:
      # fetch-depth 0 is required so git-cliff sees tags/history.
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      # Validates v*-style semver tag and exposes 'version' for later steps.
      - name: Derive version from tag
        id: version
        shell: bash
        run: |
          ref="${GITHUB_REF_NAME}"
          version="${ref#v}"
          if [[ -z "$version" || "$ref" == "$version" ]]; then
            echo "Error: Expected tag to start with 'v', got '$ref'"
            exit 1
          fi
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+([.-].*)?$ ]]; then
            echo "Error: Tag '$ref' is not semver-like (vMAJOR.MINOR.PATCH[-prerelease])"
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"

      # Determine previous tag (if any) to build an accurate range; falls back to --current for first tag.
      - name: Determine previous tag
        id: prev_tag
        shell: bash
        run: |
          current="v${{ steps.version.outputs.version }}"
          if prev=$(git describe --tags --abbrev=0 "${current}^" 2>/dev/null); then
            echo "prev=$prev" >> "$GITHUB_OUTPUT"
          else
            echo "prev=" >> "$GITHUB_OUTPUT"
            echo "No previous tag found; using --current mode for $current"
          fi

      # Determine git-cliff argument (range or --current) separately for clarity.
      - name: Determine git-cliff range args
        id: cliff_args
        shell: bash
        run: |
          if [ -n "${{ steps.prev_tag.outputs.prev }}" ]; then
            echo "value=${{ steps.prev_tag.outputs.prev }}..v${{ steps.version.outputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "value=--current" >> "$GITHUB_OUTPUT"
          fi

      # Uses git-cliff to render the section for this tag; keep formatting consistent with CHANGELOG.md.
      - name: Generate changelog content for this tag
        id: git-cliff
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: ${{ steps.cliff_args.outputs.value }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Treats versions containing '-' as prerelease (e.g., 1.2.3-beta.1).
      - name: Determine prerelease
        id: prerelease
        shell: bash
        run: |
          v="${{ steps.version.outputs.version }}"
          if [[ "$v" == *-* ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      # Uses gh to create/edit release; notes-file avoids shell escaping issues; RELEASE_COMMIT=github.sha.
      - name: Create or update GitHub Release using CHANGELOG
        env:
          RELEASE_COMMIT: ${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
          RELEASE_NOTES: ${{ steps.git-cliff.outputs.content }}
          IS_PRERELEASE: ${{ steps.prerelease.outputs.is_prerelease }}
        shell: bash
        run: |
          notes="${RELEASE_NOTES:-No changelog entry found}"

          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "Release v$VERSION already exists. Updating..."
            gh release edit "v$VERSION" \
              --target "$RELEASE_COMMIT" \
              --title "Release $VERSION" \
              --prerelease="$IS_PRERELEASE" \
              --notes "$notes"
          else
            echo "Creating release v$VERSION..."
            gh release create "v$VERSION" \
              --target "$RELEASE_COMMIT" \
              --title "Release $VERSION" \
              --prerelease="$IS_PRERELEASE" \
              --notes "$notes"
          fi
